function [header, t_msec, dt,frame_size,n_frames_in_parts] = widefield_toolkit__extract_tif_header(argin)
%function wf_extract_tif_header extracts the header of tif files generated by uManager
%Input
%   path_to_tif - full path to tif or 'job_def' structure
%Output
%   header - structure array of header content for each frame
%   t - time for each frame (computed from time stamps)
%   dt - time difference between frames
%Pablo


%% parse input -
%To make it code more compact, we will assume dataset is always broken into parts defined
%by multiple files, path_to_tif will be cell array, each entry pointing to a differnt file
if ischar(argin)
    path_to_tif = {argin};
elseif isstruct(argin)
    %check if file is broken into parths
    if argin.exp_prmts.concatenate_files
        path_to_tif = argin.exp_prmts.file_parts;
    else
        path_to_tif = argin.exp_prmts.file_parts;
    end
else
    error('Input must be string or job_def structure');
end


%% extract header and timestamps
n_parts = numel(path_to_tif);
header_parts = struct('header',[],'timestamps',[]);

if argin.exp_prmts.corrupted_header
     
        %% %oly one entry returned here, no addtional tags to determine
        part_i=1;
        header_parts(part_i).header = imfinfo(path_to_tif{part_i},'tif'); %oly one entry returned here, no addtional tags to determine
        n_frames = argin.exp_prmts.conditions(end).condition_frame_range(2);
        %% parse header - Unknownva
        
        % TimeStampMsec - is property number 22
        timestamps = linspace(0,1/argin.exp_prmts.fps*n_frames*1000,n_frames);
        header_parts(part_i).timestamps = timestamps';
        header_parts(part_i).n_frames = n_frames;
        
   
else
    for part_i = 1 : n_parts
        %% get full header with all tags
        header_parts(part_i).header = imfinfo(path_to_tif{part_i},'tif');
        n_frames = numel(header_parts(part_i).header);
        %% parse header - Unknownva
        
        % TimeStampMsec - is property number 22
        timestamps = zeros(n_frames,1);
        %First frame is different
        str = header_parts(part_i).header(1).UnknownTags(3).Value;
        str_properties = strsplit(str,',');
        tmp = strsplit(str_properties{22},'"');
        timestamps(1) = str2double(tmp{4});
        %Rest of frames
        for frame_i = 2 : n_frames
            str = header_parts(part_i).header(frame_i).UnknownTags.Value;
            str_properties = strsplit(str,',');
            tmp = strsplit(str_properties{22},'"');
            timestamps(frame_i) = str2double(tmp{4});
        end
        
        header_parts(part_i).timestamps = timestamps;
        header_parts(part_i).n_frames = numel(header_parts(part_i).header);
        
    end
end % if corrupted header

%% prepare output
header = cat(1,header_parts.header);
timestamps = cat(1,header_parts.timestamps);
dt = diff(timestamps);
t_msec=[0;cumsum(dt)];
frame_size = [header(1).Height header(1).Width];
n_frames_in_parts = [header_parts.n_frames];

%% cut frames out if prmts.cut_trials_out
% tmp=[];
% if argin.exp_prmts.cut_trials_out
%     n_conditions = numel(argin.exp_prmts.conditions);
%     for cond_i = 1 : n_conditions
%         first_frame = argin.exp_prmts.conditions(cond_i).condition_frame_range(1);
%         last_frame = argin.exp_prmts.conditions(cond_i).condition_frame_range(2);
%         tmp = [tmp first_frame:last_frame];
%     end
%     timestamps = timestamps(tmp);
%     t_msec = t_msec(tmp);
% end
